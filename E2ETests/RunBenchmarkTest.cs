using Microsoft.Playwright;

namespace E2ETests
{
    [TestClass]
    public class RunBenchmarkTest : BenchmarkLabBaseTest
    {
        [TestMethod]
        public async Task TestAsyncBenchmark()
        {
            await Page.GotoAsync("/Benchmarks/Show/32502/2/async-test");
            
            var suiteStatusLabel = Page.Locator("span.label.label-primary[data-role='suite-status']");
            await Expect(suiteStatusLabel).ToBeVisibleAsync();

            var llmSummaryElement = Page.Locator("b", new PageLocatorOptions { HasTextString = "Autogenerated LLM Summary" });
            await Expect(llmSummaryElement).ToBeVisibleAsync();

            var latestRunResultsElement = Page.Locator("b", new PageLocatorOptions { HasTextString = "Latest run results:" });
            await Expect(latestRunResultsElement).ToBeVisibleAsync();

            var relatedBenchmarksElement = Page.Locator("b", new PageLocatorOptions { HasTextString = "Related benchmarks:" });
            await Expect(relatedBenchmarksElement).ToBeVisibleAsync();

            var runTestButton = Page.Locator("button#runTest");
            await runTestButton.ClickAsync();

            var runningStatusLabel = Page.Locator("span.label.label-info[data-role='suite-status']");
            await Expect(runningStatusLabel).ToBeVisibleAsync();
            await Expect(runningStatusLabels).ToHaveTextAsync("Running");

            var completedStatusLabel = Page.Locator("span.label.label-success[data-role='suite-status']");
            await Expect(completedStatusLabel).ToBeVisibleAsync();
            await Expect(completedStatusLabel).ToHaveTextAsync("Completed");

            // Validate that the text of the fastest label is not empty
            var fastestLabel = Page.Locator("span[data-role='fastest-label']");
            await Expect(fastestLabel).ToBeVisibleAsync();
            await Expect(fastestLabel).Not.ToBeEmptyAsync();

            // Validate that the text of the slowest label is not empty
            var slowestLabel = Page.Locator("span[data-role='slowest-label']");
            await Expect(slowestLabel).ToBeVisibleAsync();
            await Expect(slowestLabel).Not.ToBeEmptyAsync();

            // Validate that there are more than 0 table rows with non-empty text
            var resultRows = Page.Locator("td[data-role='result-label']");
            var rowCount = await resultRows.CountAsync();
            Assert.IsTrue(rowCount > 0, "There should be more than 0 result rows.");

            for (int i = 0; i < rowCount; i++)
            {
                var rowText = await resultRows.Nth(i).TextContentAsync();
                Assert.IsFalse(string.IsNullOrWhiteSpace(rowText), $"Row {i} should not be empty.");
            }
        }
    }
}
