using Microsoft.Playwright;

namespace E2ETests
{
    [TestClass]
    public class RunBenchmarkTest : BenchmarkLabBaseTest
    {
        const int TEST_SUITE_RUN_TIMEOUT = 60000;
        const string ASYNC_TEST_URL = "/Benchmarks/Show/32502/2/async-test";
        const string DEFERRED_TEST_URL = "/Benchmarks/Show/32503";
        const string CLASSNAMES_VS_CLXS_VS_CX_URL = "/Benchmarks/Show/32422/0/classnames-vs-clsx-vs-cx";
        const string TYPE_COERCION_BENCHMARK_URL = "/Benchmarks/Show/32429/0/type-coercion-benchmark-2";
        // need globalEval here, there was a bug for it
        const string CLASS_VS_PROTOTYPE_PERFORMANCE_URL = "/Benchmarks/Show/14473/0/class-vs-prototype-performance";
        // need globalEval here, there was a bug for it
        const string IFELSE_VS_SMALL_SWITCH_URL = "/Benchmarks/Show/32454/1/ifelse-vs-small-switch";


        [TestMethod]
        public async Task TestAsyncBenchmark()
        {
            await ValidateBenchmarkCanRun(ASYNC_TEST_URL);
        }

        [TestMethod]
        public async Task TestDeferredBenchmark()
        {
            await ValidateBenchmarkCanRun(DEFERRED_TEST_URL);
        }

        [TestMethod]
        public async Task TestClassnamesVsClxsVsCxBenchmark()
        {
            await ValidateBenchmarkCanRun(CLASSNAMES_VS_CLXS_VS_CX_URL);
        }

        [TestMethod]
        public async Task TestTypeCoercionBenchmark()
        {
            await ValidateBenchmarkCanRun(TYPE_COERCION_BENCHMARK_URL);
        }

        [TestMethod]
        public async Task TestClassVsPrototypePerformanceBenchmark()
        {
            await ValidateBenchmarkCanRun(CLASS_VS_PROTOTYPE_PERFORMANCE_URL);
        }

        [TestMethod]
        public async Task TestIfElseVsSmallSwitchBenchmark()
        {
            await ValidateBenchmarkCanRun(IFELSE_VS_SMALL_SWITCH_URL);
        }

        private async Task ValidateBenchmarkCanRun(string benchmarkUrl)
        {
            await Page.GotoAsync(benchmarkUrl);
            var suiteStatusLabel = Page.Locator("span.label.label-primary[data-role='suite-status']");
            await Expect(suiteStatusLabel).ToBeVisibleAsync();

            var llmSummaryElement = Page.Locator("b", new PageLocatorOptions { HasTextString = "Autogenerated LLM Summary" });
            await Expect(llmSummaryElement).ToBeVisibleAsync();

            var latestRunResultsElement = Page.Locator("b", new PageLocatorOptions { HasTextString = "Latest run results:" });
            await Expect(latestRunResultsElement).ToBeVisibleAsync();

            var relatedBenchmarksElement = Page.Locator("b", new PageLocatorOptions { HasTextString = "Related benchmarks:" });
            await Expect(relatedBenchmarksElement).ToBeVisibleAsync();

            var runTestButton = Page.Locator("button#runTest");
            await runTestButton.ClickAsync();

            var runningStatusLabel = Page.Locator("span.label.label-info[data-role='suite-status']");
            await Expect(runningStatusLabel).ToBeVisibleAsync();
            await Expect(runningStatusLabel).ToHaveTextAsync("Running");

            var completedStatusLabel = Page.Locator("span.label.label-success[data-role='suite-status']");
            await Expect(completedStatusLabel).ToBeVisibleAsync(new LocatorAssertionsToBeVisibleOptions { Timeout = TEST_SUITE_RUN_TIMEOUT });
            await Expect(completedStatusLabel).ToHaveTextAsync("Completed", new LocatorAssertionsToHaveTextOptions { Timeout = TEST_SUITE_RUN_TIMEOUT });

            // Validate that the text of the fastest label is not empty
            var fastestLabel = Page.Locator("span[data-role='fastest-label']");
            await Expect(fastestLabel).ToBeVisibleAsync();
            await Expect(fastestLabel).Not.ToBeEmptyAsync();

            // Validate that the text of the slowest label is not empty
            var slowestLabel = Page.Locator("span[data-role='slowest-label']");
            await Expect(slowestLabel).ToBeVisibleAsync();
            await Expect(slowestLabel).Not.ToBeEmptyAsync();

            // Validate that there are more than 0 table rows with non-empty text
            var resultRows = Page.Locator("td[data-role='result-label']");
            var rowCount = await resultRows.CountAsync();
            Assert.IsTrue(rowCount > 0, "There should be more than 0 result rows.");

            for (int i = 0; i < rowCount; i++)
            {
                var rowText = await resultRows.Nth(i).TextContentAsync();
                Assert.IsFalse(string.IsNullOrWhiteSpace(rowText), $"Row {i} should not be empty.");
            }
        }
    }
}
