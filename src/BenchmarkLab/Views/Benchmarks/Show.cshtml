@using System.Threading.Tasks
@using Humanizer
@using MeasureThat.Net.Models
@using Microsoft.AspNetCore.Identity
@using MeasureThat.Net.Logic.Web
@model MeasureThat.Net.Models.BenchmarkDto
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Benchmark: " + Model.BenchmarkName;
    if (this.Context.Request.Headers["X-Requested-With"] == "XMLHttpRequest")
    {
        // No chrome for ajax requests
        Layout = null;
    }
    bool showEditButton = false;
    if (SignInManager.IsSignedIn(User))
    {
        string userId = UserManager.GetUserId(User);
        if (string.Equals(Model.OwnerId, userId))
        {
            showEditButton = true;
        }
    }
}
<div class="page-header">
    <h2>
        <a href="@Url.Action("Index")"><span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span></a>
        &nbsp;@Model.BenchmarkName <small>(version: @Model.Version)</small>
    </h2>
    <h4>@Model.Description</h4>
    <h4><b>Comparing performance of:</b> @string.Join(" vs ", Model.TestCases.Select(t => t.TestCaseName).ToList())</h4>
    <h5>
        <b>Created:</b> @Model.WhenCreated.Humanize()
        <b>by:</b>
        @if (string.IsNullOrWhiteSpace(Model.OwnerId))
        {
        <text>
            Guest
        </text>
        }
        else
        {
        <text>
            Registered User
        </text>
        }
    </h5>
    <h5>
        <a class="btn btn-primary" href="#latest_results_block">Jump to the latest result</a>
    </h5>
</div>

@await Html.PartialAsync("_ShowBenchmark", Model)
@await Html.PartialAsync("_TestRunnerIframe", Model)

<div id="result">
    <div class="panel panel-info">
        <div class="panel-heading">
            <div class="row">
                <div class="col-md-6">
                    <h4>
                        <b>Suite status:</b>
                        <span class="label label-primary" data-role="suite-status">&lt;idle, ready to run&gt;</span>
                        <i id='spinner' class="fa fa-refresh fa-spin" style="font-size:20px;display:none;"></i>
                    </h4>
                </div>
                <div class="col-md-6 text-right">
                    <button class="btn btn-primary" id="runTest" disabled>Run tests (@Model.TestCases.Count())</button>
                    <a class="btn btn-default" asp-action="ListResults" asp-route-id="@Model.Id">Previous results</a>
                    @if (showEditButton)
                    {
                    <a class="btn btn-default" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
                    }
                    <button class="btn btn-default" id="fork-btn">
                        <i class="fa fa-code-fork" aria-hidden="true">Fork</i>
                    </button>
                    @if (showEditButton)
                    {
                    <a class="btn btn-default" data-entity-id="@Model.Id" data-role="delete-benchmark">Delete</a>
                    }
                </div>
            </div>
        </div>
        <div class="panel-heading" id="experimental_features" style="display:none">
            <div class="row">
                <div class="col-md-6">
                    <h4>
                        <b>Experimental features:</b>
                    </h4>
                    <div class="alert alert-info" role="alert">
                        Memory measurements supported only in Chrome.
                        <br>
                        For precise memory measurements Chrome must be launched with <code>--enable-precise-memory-info</code> flag.
                        <br>More information: <a href="https://trackjs.com/blog/monitoring-javascript-memory/" target="_blank">Monitoring JavaScript Memory</a>
                    </div>
                </div>
                <div class="col-md-6 text-right">
                    <button class="btn btn-primary" id="runTestWithMemory">Run tests (record memory info)</button>
                </div>
            </div>
        </div>
        <ul class="list-group">
            <li class="list-group-item">
                <table class="table table-striped table-bordered table-hover">
                    <tr>
                        <th>Test case name</th>
                        <th>Result</th>
                    </tr>

                    @foreach (var test in Model.TestCases)
                    {
                    <tr data-row-for="@test.TestCaseName">
                        <td>@test.TestCaseName</td>
                        <td data-role="result-label"></td>
                    </tr>
                    }
                </table>
                <h4><b>Fastest:</b> <span data-role="fastest-label">N/A</span></h4>
                <h4><b>Slowest:</b> <span data-role="slowest-label">N/A</span></h4>
            </li>
        </ul>
    </div>
</div>

<div class="panel-body" id="genai-placeholder">
    <p>LLM Description</p>
    @await Component.InvokeAsync("GenAISummary", new { benchmarkId = Model.Id })
</div>

<div class="panel-body" id="related-benchmarks-placeholder">
    <p>Related Benchmarks</p>
    @await Component.InvokeAsync("RelatedBenchmarks", new { relatedIds = Model.RelatedIds })
</div>

<div class="panel panel-default" id="latest_results_block">
    <div class="panel-heading"><b>Latest run results:</b></div>
    <div class="panel-body" id="results-placeholder">
        @await Component.InvokeAsync("LatestBenchmarkResult", new { benchmarkId = Model.Id })
    </div>
    <div id="chart_div" style="width: 90%; height: 35%;"></div>
    <div id="memory_chart_div"></div>
</div>

@section Styles
    {
    @{await Html.RenderPartialAsync("_CodeMirrorStyles");}
}

@using (Html.BeginForm("PublishResults", "Benchmarks", FormMethod.Post, new { @class = "hidden", id = "results-form" }))
{
@Html.AntiForgeryToken()
<input name="BenchmarkId" type="hidden" value="@Model.Id" />
<input name="BenchmarkVersion" type="hidden" value="@Model.Version" />
    var counter = 0;
    foreach (var testCase in Model.TestCases)
    {
<input name="ResultRows[@counter].TestName" type="hidden" />
<input name="ResultRows[@counter].NumberOfSamples" type="hidden" />
<input name="ResultRows[@counter].ExecutionsPerSecond" type="hidden" />
<input name="ResultRows[@counter].RelativeMarginOfError" type="hidden" />
        counter++;
    }
}


@using (Html.BeginForm("Fork", "Benchmarks", FormMethod.Post, new { @class = "hidden", id = "fork-form" }))
{
@Html.AntiForgeryToken()
<input name="id" type="hidden" value="@Model.Id" />
}

<div class="hidden" id="delete-form">
    <form action="/Benchmarks/Delete" method="post">
        <input type="hidden" name="id">
        @Html.AntiForgeryToken()
    </form>
</div>

@section Scripts {
    <script src="~/js/benchmarklab.js" asp-append-version="true"></script>

    <script type="text/javascript">
        DisqusComments.setupLoad();
        new ShowPageController();
        new DeleteBenchmarkHandler();
    </script>

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

    @{await Html.RenderPartialAsync("_CodeMirrorScripts");}
}

<hr />

<div class="text-center">
    <button class="show-comments btn btn-default"><i class="fa fa-comments" aria-hidden="true"></i>&nbsp;Comments</button>
</div>

<div class="modal fade" id="delete-confirm" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">Confirm delete:</h4>
            </div>
            <div class="modal-body" style="text-align: center">
                Do you really want to delete benchmark?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="perform-delete">Delete</button>
            </div>
        </div>
    </div>
</div>
<!-- The empty element required for Disqus to loads comments into -->
<div id="disqus_thread"></div>
@section headAdditions{
    <link rel="canonical" href="@Url.Action("Show", "Benchmarks", new { id = Model.Id, version = Model.Version, name = SeoFriendlyStringConverter.Convert(Model.BenchmarkName)}, Url.ActionContext.HttpContext.Request.Scheme)" />
}