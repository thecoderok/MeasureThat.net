@using System.Threading.Tasks
@using MeasureThat.Net.Models
@model MeasureThat.Net.Models.BenchmarkDto

@{
    bool hasHtmlPreparationCode = !string.IsNullOrWhiteSpace(Model.HtmlPreparationCode);
    bool hasScriptPreparationCode = !string.IsNullOrWhiteSpace(Model.ScriptPreparationCode);
    string messageHtml = !hasHtmlPreparationCode ? "<Not specified>" : string.Empty;
    string messageScript = !hasScriptPreparationCode ? "<Not specified>" : string.Empty;
}
@if (hasHtmlPreparationCode)
{
    <div class="panel panel-default">

        <div class="panel-heading"><b>HTML Preparation code:</b> @messageHtml</div>

        <div class="panel-body">
            <textarea class="form-control" readonly data-code="html">@Model.HtmlPreparationCode</textarea>
        </div>
    </div>    
}
@if (hasScriptPreparationCode)
{
    <div class="panel panel-default">
        <div class="panel-heading"><b>Script Preparation code: </b> @messageScript</div>
        <div class="panel-body">
            <textarea class="form-control auto-height" readonly data-code="javascript">@Model.ScriptPreparationCode</textarea>
        </div>
    </div>
}
@await Html.PartialAsync("_SharedAds")
<div class="panel panel-default">
    <div class="panel-heading">Tests:</div>

    <ul class="list-group">
        @foreach (var test in Model.TestCases)
        {
            <li class="list-group-item">
                <h4>
                    @test.TestCaseName
                    @if(test.Deferred)
                    {
                        <span class="label label-info">[Async/Deferred]</span>
                    }
                </h4>
                
                <textarea class="form-control" readonly data-code="javascript">@test.BenchmarkCode</textarea>
            </li>
        }
    </ul>
</div>